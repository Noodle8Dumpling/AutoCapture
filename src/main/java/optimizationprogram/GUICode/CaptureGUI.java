/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package optimizationprogram.GUICode;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import optimizationprogram.tools.GotoSleep;
import optimizationprogram.tools.ShowMsgDialogue;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ComboBoxUI;
import javax.swing.plaf.ComponentUI;
import javax.swing.plaf.basic.*;

/**
 * @author admain
 */
public class CaptureGUI extends JPanel implements ActionListener, ItemListener, TextListener {

    /**
     * Creates new form CaptureGUI
     */
    public CaptureGUI() {
        initComponents();
    }

    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event-dispatching thread.
     */
    private static void createAndShowGUI() {
        Font f = new Font("微软雅黑", 0, 12);
        String names[] = {"Label", "CheckBox", "PopupMenu", "MenuItem", "CheckBoxMenuItem",
                "JRadioButtonMenuItem", "ComboBox", "Button", "Tree", "ScrollPane",
                "TabbedPane", "EditorPane", "TitledBorder", "Menu", "TextArea",
                "OptionPane", "MenuBar", "ToolBar", "ToggleButton", "ToolTip",
                "ProgressBar", "TableHeader", "Panel", "List", "ColorChooser",
                "PasswordField", "TextField", "Table", "Label", "Viewport",
                "RadioButtonMenuItem", "RadioButton", "DesktopPane", "InternalFrame"
        };
        for (String item : names) {
            UIManager.put(item + ".font", f);
        }
        //Create and set up the window.
        JFrame frame = new JFrame("AutoCapturePackagesTool");

        String src = "/optimizationprogram/GUICode/u5.png";
        Image image = null;
        try {
            image = ImageIO.read(new CaptureGUI().getClass().getResource(src));
        } catch (IOException e) {
            e.printStackTrace();
        }

        frame.setIconImage(image);
        //frame.setIconImage(Toolkit.getDefaultToolkit().getImage(src));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - 520 / 2,
                Toolkit.getDefaultToolkit().getScreenSize().height / 2 - 420 / 2);
        frame.getContentPane().add(new CaptureGUI());
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * main
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel2 = new JPanel();
        jPanel1 = new JPanel();
        jSeparator1 = new JSeparator();
        jSeparator2 = new JSeparator();
        jLabel1 = new JLabel();
        jPanel3 = new JPanel();
        label_device = new JLabel();
        label_appType = new JLabel();
        label_network = new JLabel();
        comboBox_network = new JComboBox<>();
        label_inputType = new JLabel();
        textField_inputSource = new JTextField();
        label_outputFolder = new JLabel();
        comboBox_inputType = new JComboBox<>();
        textField_outputFolder = new JTextField();
        comboBox_appType = new JComboBox<>();
        comboBox_device = new JComboBox<>();
        button_chooseFile = new JButton();
        fileChooser_inputFile = new JFileChooser();
        button_chooseFolder = new JButton();
        fileChooser_outputFolder = new JFileChooser();
        button_startUp = new JButton();
        button_continue = new JButton();
        button_suspend = new JButton();
        label_inputSource = new JLabel();
        jPanel4 = new JPanel();
        jPanel5 = new JPanel();
        jSeparator3 = new JSeparator();
        jSeparator4 = new JSeparator();
        jLabel6 = new JLabel();
        jPanel6 = new JPanel();
        jScrollPane1 = new JScrollPane();
        textArea_log = new JTextArea();
        jLabel8 = new JLabel();
        label_capturedNum = new JLabel();
        jLabel12 = new JLabel();
        label_failedNum = new JLabel();
        jLabel14 = new JLabel();
        label_pkgNum = new JLabel();
        jsb = new JScrollBar(JScrollBar.VERTICAL, 0, 1, 0, 100);

        setBackground(new Color(243, 244, 246));
        setMaximumSize(new Dimension(520, 420));
        setMinimumSize(new Dimension(520, 420));
        setPreferredSize(new Dimension(520, 420));
        setRequestFocusEnabled(false);
        setLayout(null);

        jPanel2.setBackground(new Color(243, 244, 246));
        jPanel2.setMaximumSize(new Dimension(520, 210));
        jPanel2.setMinimumSize(new Dimension(520, 210));
        jPanel2.setLayout(null);

        jPanel1.setBackground(new Color(243, 244, 246));
        jPanel1.setMaximumSize(new Dimension(520, 20));
        jPanel1.setMinimumSize(new Dimension(520, 20));
        jPanel1.setPreferredSize(new Dimension(520, 20));

        jSeparator1.setForeground(new Color(18, 155, 246));

        jSeparator2.setForeground(new Color(18, 155, 246));

        jLabel1.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        jLabel1.setForeground(new Color(15, 155, 246));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("参数配置");
        jLabel1.setPreferredSize(new Dimension(50, 15));

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 8, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 8, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );

        jPanel2.add(jPanel1);
        jPanel1.setBounds(0, 6, 520, 20);

        jPanel3.setBackground(new Color(255, 255, 255));
        jPanel3.setMaximumSize(new Dimension(500, 180));
        jPanel3.setMinimumSize(new Dimension(500, 180));
        jPanel3.setPreferredSize(new Dimension(500, 180));
        jPanel3.setLayout(null);

        label_device.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_device.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_device.setText("设备名称：");
        label_device.setMaximumSize(new Dimension(70, 20));
        label_device.setMinimumSize(new Dimension(70, 20));
        label_device.setName("label_device"); // NOI18N
        label_device.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_device);
        label_device.setBounds(20, 10, 70, 20);
        label_device.getAccessibleContext().setAccessibleDescription("");

        label_appType.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_appType.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_appType.setText("应用类型：");
        label_appType.setMaximumSize(new Dimension(70, 20));
        label_appType.setMinimumSize(new Dimension(70, 20));
        label_appType.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_appType);
        label_appType.setBounds(260, 10, 70, 20);

        label_network.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_network.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_network.setText("网卡驱动：");
        label_network.setMaximumSize(new Dimension(70, 20));
        label_network.setMinimumSize(new Dimension(70, 20));
        label_network.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_network);
        label_network.setBounds(20, 50, 70, 20);

        /*
         *设置网卡驱动下拉框
         */
        new getNetworkDriver().getComboBoxValue();
        intArray = new Integer[netWorkComboValue.length];
        for (int i = 0; i < netWorkComboValue.length; i++) {
            intArray[i] = new Integer(i);
        }
        comboBox_network = new JComboBox(intArray);
        renderer = new ComboBoxRenderer(netWorkComboValue);
        renderer.setPreferredSize(new Dimension(150, 20));
        comboBox_network.setRenderer(renderer);
        comboBox_network.setMaximumRowCount(3);
        comboBox_network.setFont(new Font("微软雅黑", 0, 12));
        comboBox_network.setForeground(new Color(153, 153, 153));
        comboBox_network.setUI((ComboBoxUI) MyComboBoxUI.createUI(comboBox_network));
        comboBox_network.setBackground(new Color(248, 248, 248));
        comboBox_network.setBorder(null);
        comboBox_network.setMaximumSize(new Dimension(150, 20));
        comboBox_network.setMinimumSize(new Dimension(150, 20));
        comboBox_network.setPreferredSize(new Dimension(150, 20));
        jPanel3.add(comboBox_network);
        comboBox_network.setBounds(90, 50, 150, 20);
        comboBox_network.addActionListener(this);
        comboBox_network.addItemListener(this);

        label_inputType.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_inputType.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_inputType.setText("输入类型：");
        label_inputType.setMaximumSize(new Dimension(70, 20));
        label_inputType.setMinimumSize(new Dimension(70, 20));
        label_inputType.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_inputType);
        label_inputType.setBounds(260, 50, 70, 20);

        textField_inputSource.setBackground(new Color(248, 248, 248));
        textField_inputSource.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        textField_inputSource.setForeground(new Color(153, 153, 153));
        textField_inputSource.setEditable(false);
        textField_inputSource.setText("[请选择数据源]");
        textField_inputSource.setBorder(null);
        textField_inputSource.setMaximumSize(new Dimension(220, 20));
        textField_inputSource.setMinimumSize(new Dimension(220, 20));
        textField_inputSource.setPreferredSize(new Dimension(220, 20));
        jPanel3.add(textField_inputSource);
        textField_inputSource.setBounds(90, 90, 130, 20);

        label_outputFolder.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_outputFolder.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_outputFolder.setText("输出路径：");
        label_outputFolder.setMaximumSize(new Dimension(70, 20));
        label_outputFolder.setMinimumSize(new Dimension(70, 20));
        label_outputFolder.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_outputFolder);
        label_outputFolder.setBounds(260, 90, 70, 20);

        comboBox_inputType.setMaximumRowCount(3);
        comboBox_inputType.setFont(new Font("微软雅黑", 0, 12));
        comboBox_inputType.setForeground(new Color(153, 153, 153));
        comboBox_inputType.setUI((ComboBoxUI) MyComboBoxUI.createUI(comboBox_inputType));
        comboBox_inputType.setBackground(new Color(248, 248, 248));
        comboBox_inputType.setModel(new DefaultComboBoxModel<>(new String[]{"文件(*.txt)"}));
        comboBox_inputType.setBorder(null);
        comboBox_inputType.setMaximumSize(new Dimension(150, 20));
        comboBox_inputType.setMinimumSize(new Dimension(150, 20));
        comboBox_inputType.setPreferredSize(new Dimension(150, 20));
        jPanel3.add(comboBox_inputType);
        comboBox_inputType.setBounds(330, 50, 150, 20);

        textField_outputFolder.setBackground(new Color(248, 248, 248));
        textField_outputFolder.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        textField_outputFolder.setForeground(new Color(153, 153, 153));
        textField_outputFolder.setEditable(false);
        textField_outputFolder.setText("/请选择文件输出目录/");
        textField_outputFolder.setBorder(null);
        textField_outputFolder.setMaximumSize(new Dimension(150, 20));
        textField_outputFolder.setMinimumSize(new Dimension(150, 20));
        textField_outputFolder.setPreferredSize(new Dimension(150, 20));
        jPanel3.add(textField_outputFolder);
        textField_outputFolder.setBounds(330, 90, 130, 20);

        /*
         *设置应用类型下拉
         */
        appTypeComboValue = new String[]{"华为应用市场", "小米应用商店"};
        intArray = new Integer[appTypeComboValue.length];
        for (int i = 0; i < appTypeComboValue.length; i++) {
            intArray[i] = new Integer(i);
        }
        comboBox_appType = new JComboBox(intArray);
        renderer = new ComboBoxRenderer(appTypeComboValue);
        renderer.setPreferredSize(new Dimension(150, 20));
        comboBox_appType.setMaximumRowCount(3);
        comboBox_appType.setRenderer(renderer);
        comboBox_appType.setFont(new Font("微软雅黑", 0, 12));
        comboBox_appType.setForeground(new Color(153, 153, 153));
        comboBox_appType.setUI((ComboBoxUI) MyComboBoxUI.createUI(comboBox_appType));
        comboBox_appType.setBackground(new Color(248, 248, 248));
        comboBox_appType.setBorder(null);
        comboBox_appType.setMaximumSize(new Dimension(150, 20));
        comboBox_appType.setMinimumSize(new Dimension(150, 20));
        comboBox_appType.setPreferredSize(new Dimension(150, 20));
        jPanel3.add(comboBox_appType);
        comboBox_appType.setBounds(330, 10, 150, 20);
        comboBox_appType.addActionListener(this);
        comboBox_appType.addItemListener(this);

        /*
         * 设置设备名称下拉框
         */
        new getDeviceName().getComboBoxValue();
        intArray = new Integer[deviceNameComboValue.length];
        for (int i = 0; i < deviceNameComboValue.length; i++) {
            intArray[i] = new Integer(i);
        }
        comboBox_device = new JComboBox(intArray);
        renderer = new ComboBoxRenderer(deviceNameComboValue);
        renderer.setPreferredSize(new Dimension(150, 20));
        comboBox_device.setRenderer(renderer);
        comboBox_device.setMaximumRowCount(3);
        comboBox_device.setFont(new Font("微软雅黑", 0, 12));
        comboBox_device.setForeground(new Color(153, 153, 153));
        comboBox_device.setUI((ComboBoxUI) MyComboBoxUI.createUI(comboBox_device));
        comboBox_device.setBackground(new Color(248, 248, 248));
        comboBox_device.setBorder(null);
        comboBox_device.setMaximumSize(new Dimension(150, 20));
        comboBox_device.setMinimumSize(new Dimension(150, 20));
        comboBox_device.setPreferredSize(new Dimension(150, 20));
        jPanel3.add(comboBox_device);
        comboBox_device.setBounds(90, 10, 150, 20);
        comboBox_device.addActionListener(this);
        comboBox_device.addItemListener(this);

        button_chooseFile.setHorizontalAlignment(SwingConstants.RIGHT);
        button_chooseFile.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u118.png"))); // NOI18N
        button_chooseFile.setBorder(null);
        button_chooseFile.setBorderPainted(false);
        button_chooseFile.setContentAreaFilled(false);
        button_chooseFile.setHorizontalTextPosition(SwingConstants.CENTER);
        button_chooseFile.setMaximumSize(new Dimension(20, 20));
        button_chooseFile.setMinimumSize(new Dimension(20, 20));
        button_chooseFile.setPreferredSize(new Dimension(20, 20));
        jPanel3.add(button_chooseFile);
        button_chooseFile.setBounds(220, 90, 20, 20);
        button_chooseFile.addActionListener(this);

        fileChooser_inputFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser_inputFile.setFont(new Font("微软雅黑", 0, 12));

        button_chooseFolder.setHorizontalAlignment(SwingConstants.RIGHT);
        button_chooseFolder.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u118.png"))); // NOI18N
        button_chooseFolder.setBorder(null);
        button_chooseFolder.setBorderPainted(false);
        button_chooseFolder.setContentAreaFilled(false);
        button_chooseFolder.setHorizontalTextPosition(SwingConstants.CENTER);
        button_chooseFolder.setMaximumSize(new Dimension(20, 20));
        button_chooseFolder.setMinimumSize(new Dimension(20, 20));
        button_chooseFolder.setPreferredSize(new Dimension(20, 20));
        jPanel3.add(button_chooseFolder);
        button_chooseFolder.setBounds(460, 90, 20, 20);
        button_chooseFolder.addActionListener(this);

        fileChooser_outputFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser_outputFolder.setFont(new Font("微软雅黑", 0, 12));

        button_startUp.setUI(new MyClassicButtonUI());
        button_startUp.setBackground(new Color(18, 155, 246));
        button_startUp.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_startUp.setForeground(new Color(255, 255, 255));
        button_startUp.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u61.png")));
        button_startUp.setText("开 始");
        button_startUp.setBorder(null);
        button_startUp.setBorderPainted(false);
        button_startUp.setContentAreaFilled(false);
        button_startUp.setHorizontalTextPosition(SwingConstants.CENTER);
        button_startUp.setMaximumSize(new Dimension(60, 26));
        button_startUp.setMinimumSize(new Dimension(60, 26));
        button_startUp.setPreferredSize(new Dimension(60, 26));
        jPanel3.add(button_startUp);
        button_startUp.setBounds(80, 130, 60, 26);
        button_startUp.addActionListener(this);

        button_continue.setUI(new MyClassicButtonUI());
        button_continue.setEnabled(false);
        button_continue.setBackground(new Color(16, 194, 92));
        button_continue.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_continue.setForeground(new Color(255, 255, 255));
        button_continue.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u63.png")));
        button_continue.setText("继 续");
        button_continue.setBorder(null);
        button_continue.setBorderPainted(false);
        button_continue.setContentAreaFilled(false);
        button_continue.setHorizontalTextPosition(SwingConstants.CENTER);
        button_continue.setMaximumSize(new Dimension(60, 26));
        button_continue.setMinimumSize(new Dimension(60, 26));
        button_continue.setPreferredSize(new Dimension(60, 26));
        jPanel3.add(button_continue);
        button_continue.setBounds(220, 130, 60, 26);
        button_continue.addActionListener(this);

        button_suspend.setUI(new MyClassicButtonUI());
        button_suspend.setEnabled(false);
        button_suspend.setBackground(new Color(204, 0, 0));
        button_suspend.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_suspend.setForeground(new Color(255, 255, 255));
        button_suspend.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u65.png")));
        button_suspend.setText("暂 停");
        button_suspend.setBorder(null);
        button_suspend.setBorderPainted(false);
        button_suspend.setContentAreaFilled(false);
        button_suspend.setHorizontalTextPosition(SwingConstants.CENTER);
        button_suspend.setMaximumSize(new Dimension(60, 26));
        button_suspend.setMinimumSize(new Dimension(60, 26));
        button_suspend.setPreferredSize(new Dimension(60, 26));
        jPanel3.add(button_suspend);
        button_suspend.setBounds(360, 130, 60, 26);
        button_suspend.addActionListener(this);

        label_inputSource.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_inputSource.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        label_inputSource.setText("输入来源：");
        label_inputSource.setMaximumSize(new Dimension(70, 20));
        label_inputSource.setMinimumSize(new Dimension(70, 20));
        label_inputSource.setPreferredSize(new Dimension(70, 20));
        jPanel3.add(label_inputSource);
        label_inputSource.setBounds(20, 90, 70, 20);

        jPanel2.add(jPanel3);
        jPanel3.setBounds(10, 30, 500, 170);

        add(jPanel2);
        jPanel2.setBounds(0, 0, 520, 200);

        jPanel4.setBackground(new Color(243, 244, 246));
        jPanel4.setLayout(null);

        jPanel5.setBackground(new Color(243, 244, 246));
        jPanel5.setMaximumSize(new Dimension(520, 20));
        jPanel5.setPreferredSize(new Dimension(520, 20));

        jSeparator3.setForeground(new Color(18, 155, 246));

        jSeparator4.setForeground(new Color(18, 155, 246));

        jLabel6.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        jLabel6.setForeground(new Color(15, 155, 246));
        jLabel6.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel6.setText("运行监控");
        jLabel6.setPreferredSize(new Dimension(50, 15));

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator3, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jSeparator4, GroupLayout.PREFERRED_SIZE, 8, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator3, GroupLayout.PREFERRED_SIZE, 8, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );

        jPanel4.add(jPanel5);
        jPanel5.setBounds(0, 10, 520, 20);

        jPanel6.setBackground(new Color(255, 255, 255));
        jPanel6.setMaximumSize(new Dimension(500, 170));
        jPanel6.setPreferredSize(new Dimension(500, 170));
        jPanel6.setLayout(null);

        jScrollPane1.setBorder(BorderFactory.createLineBorder(new Color(243, 244, 246)));
        jScrollPane1.setMaximumSize(new Dimension(480, 115));
        jScrollPane1.setMinimumSize(new Dimension(480, 115));
        jScrollPane1.setPreferredSize(new Dimension(480, 115));
        jsb.setBorder(null);
        jsb.setUI(new MyScrollBarUI());
        jScrollPane1.setVerticalScrollBar(jsb);

        textArea_log.setEditable(false);
        textArea_log.setFont(new Font("微软雅黑", 0, 12));
        textArea_log.setColumns(20);
        textArea_log.setLineWrap(true);
        textArea_log.setRows(5);
        textArea_log.setBorder(BorderFactory.createLineBorder(new Color(243, 244, 246)));
        jScrollPane1.setViewportView(textArea_log);

        jPanel6.add(jScrollPane1);
        jScrollPane1.setBounds(10, 15, 480, 110);

        jLabel8.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        jLabel8.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        jLabel8.setText("成功App数：");
        jLabel8.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel8.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel8.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel6.add(jLabel8);
        jLabel8.setBounds(10, 140, 85, 15);

        label_capturedNum.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_capturedNum.setText("0");
        label_capturedNum.setMaximumSize(new java.awt.Dimension(50, 15));
        label_capturedNum.setMinimumSize(new java.awt.Dimension(50, 15));
        label_capturedNum.setPreferredSize(new java.awt.Dimension(50, 15));
        jPanel6.add(label_capturedNum);
        label_capturedNum.setBounds(90, 140, 50, 15);

        jLabel12.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        jLabel12.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        jLabel12.setText("失败App数：");
        jLabel12.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel12.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel12.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel6.add(jLabel12);
        jLabel12.setBounds(190, 140, 85, 15);

        label_failedNum.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_failedNum.setText("0");
        label_failedNum.setMaximumSize(new java.awt.Dimension(50, 15));
        label_failedNum.setMinimumSize(new java.awt.Dimension(50, 15));
        label_failedNum.setPreferredSize(new java.awt.Dimension(50, 15));
        jPanel6.add(label_failedNum);
        label_failedNum.setBounds(270, 140, 50, 15);

        jLabel14.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        jLabel14.setIcon(new ImageIcon(getClass().getResource("/optimizationprogram/GUICode/u53.png"))); // NOI18N
        jLabel14.setText("采集记录数：");
        jLabel14.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel14.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel14.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel6.add(jLabel14);
        jLabel14.setBounds(360, 140, 85, 15);

        label_pkgNum.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_pkgNum.setText("0");
        label_pkgNum.setMaximumSize(new java.awt.Dimension(50, 15));
        label_pkgNum.setMinimumSize(new java.awt.Dimension(50, 15));
        label_pkgNum.setPreferredSize(new java.awt.Dimension(50, 15));
        jPanel6.add(label_pkgNum);
        label_pkgNum.setBounds(440, 140, 50, 15);

        jPanel4.add(jPanel6);
        jPanel6.setBounds(10, 40, 500, 170);

        add(jPanel4);
        jPanel4.setBounds(0, 200, 520, 220);
    }// </editor-fold>

    @Override
    public void actionPerformed(ActionEvent evt) {
        /*
         * 选择源文件
         */
        if (evt.getSource() == button_chooseFile) {

            int returnVal = fileChooser_inputFile.showOpenDialog(CaptureGUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser_inputFile.getSelectedFile();
                textField_inputSource.setText(file.getAbsolutePath());

                if (!input_current_value.equals(file.getAbsolutePath())) {
                    if (button_continue.isEnabled() == true)
                        button_continue.setEnabled(false);
                } else {
                    if (button_continue.isEnabled() == false
                            && comboBox_device.getSelectedItem().toString().equals(device_current_value)
                            && comboBox_network.getSelectedItem().toString().equals(network_current_value)
                            && comboBox_appType.getSelectedItem().toString().equals(apptype_current_value)
                            && textField_outputFolder.getText().equals(output_current_value)) {
                        button_continue.setEnabled(true);
                    }
                }

            } else {
                //System.out.println("Open command cancelled by user.");
            }
        }
        /*
         * 选择输出目录
         */
        if (evt.getSource() == button_chooseFolder) {
            fileChooser_outputFolder.setFont(new Font("微软雅黑", 0, 12));
            int returnVal = fileChooser_outputFolder.showOpenDialog(CaptureGUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser_outputFolder.getSelectedFile();
                //This is where a real application would open the file.
                textField_outputFolder.setText(file.getAbsolutePath());

                if (!output_current_value.equals(file.getAbsolutePath())) {
                    if (button_continue.isEnabled() == true)
                        button_continue.setEnabled(false);
                } else {
                    if (button_continue.isEnabled() == false
                            && comboBox_device.getSelectedItem().toString().equals(device_current_value)
                            && comboBox_network.getSelectedItem().toString().equals(network_current_value)
                            && comboBox_appType.getSelectedItem().toString().equals(apptype_current_value)
                            && textField_inputSource.getText().equals(input_current_value)) {
                        button_continue.setEnabled(true);
                    }
                }
            } else {
                //System.out.println("Open command cancelled by user.");
            }
        }
        /*
         *点击开始按钮
         */
        if (evt.getSource() == button_startUp) {

            if ("[请选择数据源]".equals(textField_inputSource.getText())
                    || "/请选择文件输出目录/".equals(textField_outputFolder.getText())
                    || "<无>".equals(netWorkComboValue[0])
                    || "<无>".equals(deviceNameComboValue[0])) {
                showMsgDia.showInfoWin("请检查参数配置是否正确!");
                return;
            }

            button_startUp.setEnabled(false);
            button_continue.setEnabled(false);
            button_suspend.setEnabled(true);

            label_capturedNum.setText(String.valueOf(0));
            label_failedNum.setText(String.valueOf(0));
            label_pkgNum.setText(String.valueOf(0));
            capturedAppNum = 0;
            failAppNum = 0;
            capturedTotalPkgs = 0l;
            capturedTotalCount = 0;
            textArea_log.setText("");

            device_current_value = deviceNameComboValue[comboBox_device.getSelectedIndex()];
            apptype_current_value = appTypeComboValue[comboBox_appType.getSelectedIndex()];
            network_current_value = comboBox_network.getSelectedItem().toString();
            input_current_value = textField_inputSource.getText();
            output_current_value = textField_outputFolder.getText();
            Thread th1 = new StartUpAction(device_current_value,
                    apptype_current_value,
                    network_current_value,
                    input_current_value,
                    output_current_value);
            th1.start();
            th2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        sleep.startSleep(10 * 1000);
                        label_capturedNum.setText(String.valueOf(capturedAppNum));
                        label_failedNum.setText(String.valueOf(failAppNum));
                        if (capturedTotalPkgs<100000l){
                            label_pkgNum.setText(String.valueOf(capturedTotalPkgs));
                        }else if (capturedTotalPkgs<1000000l){
                            label_pkgNum.setText(String.valueOf(capturedTotalPkgs/100000l)+"0w+");
                        }else {
                            label_pkgNum.setText(String.valueOf(capturedTotalPkgs/1000000l)+"00w+");
                        }

                        if ("TERMINATED".equals(th1.getState().toString())) {
                            if (stopFlag) {
                                textArea_log.append("INFO:抓包程序结束···\n");
                                button_startUp.setEnabled(true);
                                button_suspend.setEnabled(false);
                            } else {
                                textArea_log.append("INFO:抓包程序终止···\n");
                            }
                            break;
                        }
                    }
                }
            });
            th2.start();
        }
        /*
         *点击继续按钮
         */
        if (evt.getSource() == button_continue) {
            if ("[请选择数据源]".equals(textField_inputSource.getText())
                    || "/请选择文件输出目录/".equals(textField_outputFolder.getText())
                    || "<无>".equals(netWorkComboValue[0])
                    || "<无>".equals(deviceNameComboValue[0])) {
                showMsgDia.showInfoWin("请检查参数配置是否正确!");
                return;
            }

            button_startUp.setEnabled(false);
            button_continue.setEnabled(false);
            button_suspend.setEnabled(true);

            capturedTotalCount = Integer.valueOf(label_capturedNum.getText().trim()) +
                    Integer.valueOf(label_failedNum.getText().trim());

            Thread th1 = new StartUpAction(deviceNameComboValue[comboBox_device.getSelectedIndex()],
                    appTypeComboValue[comboBox_appType.getSelectedIndex()],
                    comboBox_network.getSelectedItem().toString(),
                    textField_inputSource.getText(),
                    textField_outputFolder.getText());
            th1.start();

            th2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        sleep.startSleep(10 * 1000);
                        label_capturedNum.setText(String.valueOf(capturedAppNum));
                        label_failedNum.setText(String.valueOf(failAppNum));
                        label_pkgNum.setText(String.valueOf(capturedTotalPkgs));
                        if ("TERMINATED".equals(th1.getState().toString())) {
                            if (stopFlag) {
                                textArea_log.append("INFO:抓包程序结束···\n");
                                button_startUp.setEnabled(true);
                                button_suspend.setEnabled(false);
                            } else {
                                textArea_log.append("INFO:抓包程序终止···\n");
                            }
                            break;
                        }
                    }
                }
            });
            th2.start();
        }
        if (evt.getSource() == button_suspend) {
            msg = new JLabel("您确定暂停抓包吗?");
            msg.setFont(new Font("微软雅黑", 0, 13));
            int n = JOptionPane.showConfirmDialog(new JFrame(), msg, "query", JOptionPane.OK_CANCEL_OPTION);
            if (n == JOptionPane.CANCEL_OPTION) {
                return;
            }
            Thread th3 = new Thread(new Runnable() {
                @Override
                public void run() {
                    textArea_log.append("INFO:抓包程序暂停中···\n");
                    button_suspend.setEnabled(false);

                    stopFlag = false;
                    while (true) {
                        sleep.startSleep(5 * 1000);
                        if ("TERMINATED".equals(th2.getState().toString())) {
                            showMsgDia.showInfoWin("自动抓包操作已暂停!");
                            button_startUp.setEnabled(true);
                            button_continue.setEnabled(true);
                            //refreshflag = 0;
                            break;
                        }
                    }
                    stopFlag = true;
                }
            });
            th3.start();
        }
    }


    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == comboBox_device) {
            if (!comboBox_device.getSelectedItem().toString().equals(device_current_value)
                    ) {
                if (button_continue.isEnabled() == true) {
                    button_continue.setEnabled(false);
                }
            } else {
                if (button_continue.isEnabled() == false
                        && comboBox_network.getSelectedItem().toString().equals(network_current_value)
                        && appTypeComboValue[comboBox_appType.getSelectedIndex()].equals(apptype_current_value)
                        && textField_inputSource.getText().equals(input_current_value)
                        && textField_outputFolder.getText().equals(output_current_value)) {
                    button_continue.setEnabled(true);
                }
            }
        }
        if (e.getSource() == comboBox_network) {
            if (!comboBox_network.getSelectedItem().toString().equals(network_current_value)) {
                if (button_continue.isEnabled() == true) {
                    button_continue.setEnabled(false);
                }
            } else {
                if (button_continue.isEnabled() == false
                        && deviceNameComboValue[comboBox_device.getSelectedIndex()].equals(device_current_value)
                        && appTypeComboValue[comboBox_appType.getSelectedIndex()].equals(apptype_current_value)
                        && textField_inputSource.getText().equals(input_current_value)
                        && textField_outputFolder.getText().equals(output_current_value)) {
                    button_continue.setEnabled(true);
                }
            }
        }
        if (e.getSource() == comboBox_appType) {
            if (!appTypeComboValue[comboBox_appType.getSelectedIndex()].equals(apptype_current_value)) {
                if (button_continue.isEnabled() == true) {
                    button_continue.setEnabled(false);
                }
            } else {
                if (button_continue.isEnabled() == false
                        && deviceNameComboValue[comboBox_device.getSelectedIndex()].equals(device_current_value)
                        && comboBox_network.getSelectedItem().toString().equals(network_current_value)
                        && textField_inputSource.getText().equals(input_current_value)
                        && textField_outputFolder.getText().equals(output_current_value)) {
                    button_continue.setEnabled(true);
                }
            }
        }
    }

    @Override
    public void textValueChanged(TextEvent e) {

    }

    // Variables declaration - do not modify
    private JButton button_chooseFile;
    private JButton button_chooseFolder;
    private JButton button_continue;
    private JButton button_startUp;
    private JButton button_suspend;
    private JComboBox<String> comboBox_appType;
    private JComboBox<String> comboBox_device;
    private JComboBox<String> comboBox_inputType;
    private JComboBox<String> comboBox_network;
    private JLabel jLabel1;
    private JLabel jLabel12;
    private JLabel jLabel14;
    private JLabel jLabel6;
    private JLabel jLabel8;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JSeparator jSeparator3;
    private JSeparator jSeparator4;
    private JLabel label_appType;
    private JLabel label_capturedNum;
    private JLabel label_device;
    private JLabel label_failedNum;
    private JLabel label_inputSource;
    private JLabel label_inputType;
    private JLabel label_network;
    private JLabel label_outputFolder;
    private JLabel label_pkgNum;
    //private JTextArea textArea_log;
    private JTextField textField_inputSource;
    private JTextField textField_outputFolder;
    // End of variables declaration
    //新增私有变量声明
    private JScrollBar jsb;
    private Integer[] intArray;
    private ComboBoxRenderer renderer;
    private String[] appTypeComboValue;
    private JFileChooser fileChooser_inputFile;
    private JFileChooser fileChooser_outputFolder;
    private JLabel msg;
    private Thread th2;
    private String device_current_value = "";
    private String network_current_value = "";
    private String apptype_current_value = "";
    private String inputType_current_value = "";
    private String input_current_value = "";
    private String output_current_value = "";
    private ShowMsgDialogue showMsgDia = new ShowMsgDialogue();
    private GotoSleep sleep = new GotoSleep();
    //新增公共静态变量声明
    public static String[] deviceNameComboValue;
    public static String[] netWorkComboValue;
    public static Integer capturedAppNum = 0;
    public static Integer failAppNum = 0;
    public static Long capturedTotalPkgs = 0l;
    public static Integer capturedTotalCount;
    public static JTextArea textArea_log;
    public static Boolean stopFlag = true;

    static class MyComboBoxUI extends BasicComboBoxUI {
        public static ComponentUI createUI(JComponent c) {
            return new MyComboBoxUI();
        }

        @Override
        protected JButton createArrowButton() {
            JButton button = new MyArrowButton(BasicArrowButton.SOUTH);
            return button;
        }

        @Override
        protected ComboPopup createPopup() {
            ComboPopup cp = new BasicComboPopup(comboBox) {
                @Override
                protected JScrollPane createScroller() {
                    JScrollPane sp = new JScrollPane(list,
                            ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                    sp.getVerticalScrollBar().setUI(new MyScrollBarUI());
                    return sp;
                }

                @Override
                protected void configurePopup() {
                    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
                    setBorderPainted(true);
                    setBorder(new LineBorder(new Color(248, 248, 248), 10));
                    setOpaque(false);
                    add(scroller);
                    setDoubleBuffered(true);
                    setFocusable(false);
                }
            };

            return cp;
        }
        //MetalScrollBarUI
    }
}

